// libraries
#include <appimage/appimage++.h>

// local
#include "utils.h"
#include "InspectorDBusInterface.h"

// generated by `qt5_add_dbus_adaptor` cmake function
#include "inspectoradaptor.h"

InspectorDBusInterface::InspectorDBusInterface(QObject* parent) : QObject(parent) {
    new InspectorAdaptor(this);
    QDBusConnection dbus = QDBusConnection::sessionBus();
    bool operationSucceed;
    operationSucceed = dbus.registerObject(INSPECTOR_DBUS_OBJECT_PATH, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << INSPECTOR_DBUS_OBJECT_PATH;

    operationSucceed = dbus.registerService(INSPECTOR_DBUS_INTERFACE_NAME);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus service: " << INSPECTOR_DBUS_INTERFACE_NAME;
}

QStringList InspectorDBusInterface::listContents(const QString& appImagePath) {
    return QStringList();
}

QString InspectorDBusInterface::getApplicationInfo(QString appImagePath) {
    try {
        QString path = removeUriProtocolFromPath(appImagePath);
        if (QFile::exists(path)) {
            AppImageInfoReader reader(path);
            ApplicationInfo info = reader.read();

            QJsonDocument document(info.QJsonObject());
            return document.toJson();
        } else {
            return "{\"error\":\"Invalid path\"}";
        }
    } catch (std::runtime_error error) {
        std::cerr << "Error: " << error.what() << std::endl;
        return "{\"error\":\"" + QString::fromStdString(error.what()) + "\"}";
    }
}

InspectorDBusInterface::~InspectorDBusInterface() = default;

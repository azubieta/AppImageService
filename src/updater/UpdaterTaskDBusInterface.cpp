// libraries
#include <QDBusConnection>

// local
#include "UpdaterTaskDBusInterface.h"

// generated by `qt5_add_dbus_adaptor` cmake function
#include "taskadaptor.h"

UpdaterTaskDBusInterface::UpdaterTaskDBusInterface(const QString& id,
                                                   std::shared_ptr<appimage::update::Updater> updater,
                                                   QObject* parent) : QObject(parent), id(id), progressValue(0),
                                                                      progressTotal(100), updater(updater) {
    new TaskAdaptor(this);
    QDBusConnection dbus = QDBusConnection::sessionBus();
    bool operationSucceed;
    dbusObjectPath = QString(UPDATER_TASK_DBUS_OBJECT_PATH) + "/" + id;
    operationSucceed = dbus.registerObject(dbusObjectPath, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << dbusObjectPath;

    connect(&updateTimer, SIGNAL(timeout()), this, SLOT(updateTaskData()));
    updateTimer.start(200);
}

int UpdaterTaskDBusInterface::getProgressValue() {
    return progressValue;
}

int UpdaterTaskDBusInterface::getProgressTotal() {
    return progressTotal;
}

int UpdaterTaskDBusInterface::getState() {
    return state;
}

QString UpdaterTaskDBusInterface::getStatusMessage() {
    return statusMessage;
}

const QString& UpdaterTaskDBusInterface::getId() const {
    return id;
}

UpdaterTaskDBusInterface::~UpdaterTaskDBusInterface() {
    QDBusConnection dbus = QDBusConnection::sessionBus();
    dbus.unregisterObject(dbusObjectPath, QDBusConnection::UnregisterMode::UnregisterTree);
}

void UpdaterTaskDBusInterface::updateTaskData() {
    if (updater->isDone()) {
        updateTimer.stop();
        deleteLater();
    }

    int newState = updater->state();
    if (newState != state) {
        state = newState;
        emit stateChanged(state);
    }

    double newProgress;
    updater->progress(newProgress);
    int newProgressRounded = std::trunc(newProgress * 100);
    if (progressValue != newProgressRounded) {
        progressValue = newProgressRounded;
        emit progressValueChanged(progressValue);
    }

    std::string newMessage;
    updater->nextStatusMessage(newMessage);
    if (!newMessage.empty() && statusMessage != QString::fromStdString(newMessage)) {
        statusMessage = QString::fromStdString(newMessage);
        emit statusMessageChanged(statusMessage);
    }
}

// libraries
#include <QUuid>
#include <QDBusConnection>

// local
#include "UpdaterTaskDBusInterface.h"

// generated by `qt5_add_dbus_adaptor` cmake function
#include "taskadaptor.h"

UpdaterTaskDBusInterface::UpdaterTaskDBusInterface(const QString& appImagePath, bool checkOnly, QObject* parent)
    : QObject(parent), bytesReceived(0), bytesTotal(100), deltaRevisioner(appImagePath), checkOnly(checkOnly) {

    connectSignals();
    id = QUuid::createUuid().toString(QUuid::Id128);

    setState(Ready);
    publish();
}

void UpdaterTaskDBusInterface::publish() {
    new TaskAdaptor(this);

    QDBusConnection dbus = QDBusConnection::sessionBus();
    dbusObjectPath = QString(UPDATER_TASK_DBUS_OBJECT_PATH) + "/" + id;

    bool operationSucceed = dbus.registerObject(dbusObjectPath, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << dbusObjectPath;
}

int UpdaterTaskDBusInterface::getBytesReceived() {
    return bytesReceived;
}

int UpdaterTaskDBusInterface::getBytesTotal() {
    return bytesTotal;
}

int UpdaterTaskDBusInterface::getState() {
    return state;
}

const QString& UpdaterTaskDBusInterface::getId() const {
    return id;
}

UpdaterTaskDBusInterface::~UpdaterTaskDBusInterface() {
    QDBusConnection dbus = QDBusConnection::sessionBus();
    dbus.unregisterObject(dbusObjectPath, QDBusConnection::UnregisterMode::UnregisterTree);
}

void UpdaterTaskDBusInterface::onStarted() {
    setState(ReadingFile);
}

void UpdaterTaskDBusInterface::onCanceled() {
    setState(Canceled);
    emit finished();
}

void UpdaterTaskDBusInterface::onFinished(QJsonObject, QString) {
    setState(DownloadCompleted);
    emit finished();
}

void UpdaterTaskDBusInterface::onStatusChanged(short revisionerStatus) {
    switch (revisionerStatus) {
        case AppImageUpdaterBridge::RequestingGithubApi:
        case AppImageUpdaterBridge::RequestingZsyncControlFile:
        case AppImageUpdaterBridge::RequestingBintray:
            setState(LookingForUpdates);
            break;
        case AppImageUpdaterBridge::ParsingAppimageEmbededUpdateInformation:
        case AppImageUpdaterBridge::WrittingDownloadedBlockRanges:
        case AppImageUpdaterBridge::EmittingRequiredBlockRanges:
        case AppImageUpdaterBridge::CheckingChecksumsForDownloadedBlockRanges:
            setState(DownloadingUpdate);
            break;
    }
}

void UpdaterTaskDBusInterface::onError(short errorCode) {
    UpdaterTaskDBusInterface::errorCode = errorCode;
    emit error(errorCode);

    setState(Errored);
    emit finished();
}

void UpdaterTaskDBusInterface::onProgress(int, qint64 bytesReceived, qint64 bytesTotal, double speed,
                                          const QString& speedUnits) {
    setState(DownloadingUpdate);

    bytesReceived = bytesReceived;
    emit bytesReceivedChanged(bytesReceived);

    if (UpdaterTaskDBusInterface::bytesTotal != bytesTotal) {
        bytesTotal = bytesTotal;
        emit bytesTotalChanged(bytesTotal);
    }
}

void UpdaterTaskDBusInterface::setState(State newState) {
    if (newState != state) {
        state = newState;
        emit stateChanged(state);
    }
}

void UpdaterTaskDBusInterface::connectSignals() const {
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::started,
            this, &UpdaterTaskDBusInterface::onStarted);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::canceled,
            this, &UpdaterTaskDBusInterface::onCanceled);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::finished,
            this, &UpdaterTaskDBusInterface::onFinished);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::statusChanged,
            this, &UpdaterTaskDBusInterface::onStatusChanged);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::error,
            this, &UpdaterTaskDBusInterface::onError);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::progress,
            this, &UpdaterTaskDBusInterface::onProgress);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::updateAvailable,
            this, &UpdaterTaskDBusInterface::onUpdateAvailable);
}

void UpdaterTaskDBusInterface::cancel() {
    deltaRevisioner.cancel();
}

void UpdaterTaskDBusInterface::onUpdateAvailable(bool updateAvailable, QJsonObject) {
    if (checkOnly) {
        if (updateAvailable)
            setState(UpdateAvailable);
        else
            setState(NoUpdateAvailable);

        emit finished();
    } else
        setState(DownloadingUpdate);
}

void UpdaterTaskDBusInterface::start() {
    setState(ReadingFile);

    if (checkOnly)
        deltaRevisioner.checkForUpdate();
    else
        deltaRevisioner.start();
}

int UpdaterTaskDBusInterface::getErrorCode() {
    return errorCode;
}

// libraries
#include <QUuid>
#include <QDBusConnection>

// local
#include "UpdaterTaskDBusInterface.h"

// generated by `qt5_add_dbus_adaptor` cmake function
#include "taskadaptor.h"

UpdaterTaskDBusInterface::UpdaterTaskDBusInterface(const QString& appImagePath, bool onlyCheck, QObject* parent)
    : QObject(parent), progressValue(0), progressTotal(100), deltaRevisioner(appImagePath) {

    connectSignals();
    id = QUuid::createUuid().toString(QUuid::Id128);

    setState(Ready);
    publish();

    if (onlyCheck)
        deltaRevisioner.checkForUpdate();
    else
        deltaRevisioner.start();
}

void UpdaterTaskDBusInterface::publish() {
    new TaskAdaptor(this);

    QDBusConnection dbus = QDBusConnection::sessionBus();
    dbusObjectPath = QString(UPDATER_TASK_DBUS_OBJECT_PATH) + "/" + id;

    bool operationSucceed = dbus.registerObject(dbusObjectPath, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << dbusObjectPath;
}

int UpdaterTaskDBusInterface::getProgressValue() {
    return progressValue;
}

int UpdaterTaskDBusInterface::getProgressTotal() {
    return progressTotal;
}

int UpdaterTaskDBusInterface::getState() {
    return state;
}

QString UpdaterTaskDBusInterface::getStatusMessage() {
    return statusMessage;
}

const QString& UpdaterTaskDBusInterface::getId() const {
    return id;
}

UpdaterTaskDBusInterface::~UpdaterTaskDBusInterface() {
    QDBusConnection dbus = QDBusConnection::sessionBus();
    dbus.unregisterObject(dbusObjectPath, QDBusConnection::UnregisterMode::UnregisterTree);
}

void UpdaterTaskDBusInterface::onStarted() {
    setState(Running);
}

void UpdaterTaskDBusInterface::onCanceled() {
    setState(Canceled);
}

void UpdaterTaskDBusInterface::onFinished(QJsonObject, QString) {
    setState(Finished);
}

void UpdaterTaskDBusInterface::onStatusChanged(short revisionerStatus) {
    statusMessage = AppImageUpdaterBridge::statusCodeToString(revisionerStatus);
    emit statusMessageChanged(statusMessage);
}

void UpdaterTaskDBusInterface::onError(short errorCode) {
    statusMessage = AppImageUpdaterBridge::errorCodeToDescriptionString(errorCode);
    emit statusMessageChanged(statusMessage);

    setState(Faulty);
}

void UpdaterTaskDBusInterface::onProgress(int, qint64 bytesRecived, qint64 bytesTotal, double speed,
                                          const QString& speedUnits) {

    if (bytesTotal > 0) {
        progressValue = (bytesRecived / bytesTotal) * 100;
        emit progressValueChanged(progressValue);
    }
}

void UpdaterTaskDBusInterface::setState(State newState) {
    state = newState;
    emit stateChanged(state);
}

void UpdaterTaskDBusInterface::connectSignals() const {
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::started,
            this, &UpdaterTaskDBusInterface::onStarted);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::canceled,
            this, &UpdaterTaskDBusInterface::onCanceled);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::finished,
            this, &UpdaterTaskDBusInterface::onFinished);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::statusChanged,
            this, &UpdaterTaskDBusInterface::onStatusChanged);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::error,
            this, &UpdaterTaskDBusInterface::onError);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::progress,
            this, &UpdaterTaskDBusInterface::onProgress);
    connect(&deltaRevisioner, &AppImageUpdaterBridge::AppImageDeltaRevisioner::updateAvailable,
            this, &UpdaterTaskDBusInterface::onUpdateAvailable);
}

void UpdaterTaskDBusInterface::cancel() {
    deltaRevisioner.cancel();
}

void UpdaterTaskDBusInterface::onUpdateAvailable(bool updateAvailable, QJsonObject) {
    if (updateAvailable)
        setState(Finished);
    else
        setState(Faulty);
}


// libraries
#include <QDBusConnection>
#include <QDebug>

// local
#include "UpdaterDBusInterface.h"
#include "UpdaterTaskDBusInterface.h"
#include "utils.h"

// generated by `qt5_add_dbus_adaptor` cmake function
#include "updateradaptor.h"

UpdaterDBusInterface::UpdaterDBusInterface(QObject* parent) : QObject(parent) {
    new UpdaterAdaptor(this);
    QDBusConnection dbus = QDBusConnection::sessionBus();
    bool operationSucceed;
    operationSucceed = dbus.registerObject(UPDATER_DBUS_OBJECT_PATH, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << UPDATER_DBUS_OBJECT_PATH;

    operationSucceed = dbus.registerService(UPDATER_DBUS_INTERFACE_NAME);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus service: " << UPDATER_DBUS_INTERFACE_NAME;

    operationSucceed = dbus.registerService(UPDATER_TASK_DBUS_INTERFACE_NAME);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus service: " << UPDATER_TASK_DBUS_INTERFACE_NAME;
}

UpdaterDBusInterface::~UpdaterDBusInterface() = default;

QString UpdaterDBusInterface::update(const QString& appImagePath) {
    const QString path = removeUriProtocolFromPath(appImagePath);

    return updaterService.update(path);
}

QString UpdaterDBusInterface::check(const QString& appImagePath) {
    const QString path = removeUriProtocolFromPath(appImagePath);

    return updaterService.check(path);
}

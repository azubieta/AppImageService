// libraries
#include <QDBusConnection>
#include <QDebug>

// local
#include "DBusInterface.h"
#include <LauncherService.h>

// generated by `qt5_add_dbus_adaptor` cmake function
#include "launcheradaptor.h"

DBusInterface::DBusInterface(QObject* parent) : QObject(parent) {
    new LauncherAdaptor(this);
    QDBusConnection dbus = QDBusConnection::sessionBus();
    bool operationSucceed;
    operationSucceed = dbus.registerObject(LAUNCHER_DBUS_OBJECT_PATH, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << LAUNCHER_DBUS_OBJECT_PATH;

    operationSucceed = dbus.registerService(LAUNCHER_DBUS_INTERFACE_NAME);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus service: " << LAUNCHER_DBUS_INTERFACE_NAME;

}

bool DBusInterface::registerApp(const QString& appImagePath) {
    qDebug() << __FUNCTION__ << " : " << appImagePath;
    if (appImagePath.startsWith("file://"))
        return launcherService.registerApp(appImagePath.mid(7).toStdString());
    else
        return launcherService.registerApp(appImagePath.toStdString());
}

bool DBusInterface::unregisterApp(const QString& appImagePath) {
    qDebug() << __FUNCTION__ << " : " << appImagePath;
    if (appImagePath.startsWith("file://"))
        return launcherService.unregisterApp(appImagePath.mid(7).toStdString());
    else
        return launcherService.unregisterApp(appImagePath.toStdString());
}

DBusInterface::~DBusInterface() = default;

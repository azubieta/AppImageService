// system
extern "C" {
#include <unistd.h>
}

// libraries
#include <QtCore/QDebug>
#include <QtCore/QProcess>
#include <QtDBus/QDBusArgument>
#include <QtDBus/QDBusConnection>
#include <QtCore/QFileInfo>
#include <QtCore/QCoreApplication>

// local
#include "utils.h"
#include "InstallerDBusInterface.h"

// generated by `qt5_add_dbus_adaptor` cmake function
#include "installeradaptor.h"


InstallerDBusInterface::InstallerDBusInterface(QObject *parent) : QObject(parent) {
    new InstallerAdaptor(this);
    QDBusConnection dbus = QDBusConnection::sessionBus();
    bool operationSucceed;
    operationSucceed = dbus.registerObject(INSTALLER_DBUS_OBJECT_PATH, this);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus object: " << INSTALLER_DBUS_OBJECT_PATH;

    operationSucceed = dbus.registerService(INSTALLER_DBUS_INTERFACE_NAME);
    if (!operationSucceed)
        qCritical() << "Unable to register d-bus service: " << INSTALLER_DBUS_INTERFACE_NAME;
}

bool InstallerDBusInterface::install(QString appImagePath) {
    appImagePath = removeUriProtocolFromPath(appImagePath);
    QFileInfo fileInfo(appImagePath);
    try {
        if (!fileInfo.exists())
            throw std::runtime_error("The file doesn't exists.");

        QString program = "pkexec";
        QStringList arguments{QCoreApplication::applicationDirPath() + "/install-helper", appImagePath};;

        setenv("DISPLAY", ":0", true);
        QProcess process;
        process.start(program, arguments);
        process.waitForFinished();

        qDebug() << process.errorString();
        return process.exitCode() == 0;
    } catch (const std::exception &exception) {
        qWarning() << "Install " << appImagePath << " failed. " << exception.what();
        return false;
    }
}

bool InstallerDBusInterface::uninstall(QString appImagePath) {
    appImagePath = removeUriProtocolFromPath(appImagePath);
    QFileInfo fileInfo(appImagePath);
    try {
        if (!fileInfo.exists())
            throw std::runtime_error("The file doesn't exists.");

        QString program = "pkexec";
        QStringList arguments{QCoreApplication::applicationDirPath() + "/uninstall-helper", appImagePath};;

        setenv("DISPLAY", ":0", true);
        QProcess process;
        process.start(program, arguments);
        process.waitForFinished();

        qDebug() << process.errorString();
        return process.exitCode() == 0;
    } catch (const std::exception &exception) {
        qWarning() << "Uninstall " << appImagePath << " failed. " << exception.what();
        return false;
    }
}

bool InstallerDBusInterface::handleSubprocessResult(const QProcess &process) const {
    if (process.exitCode() != 0) {
        QString errorMsg = QString("%2. Exit code: %1 ").arg(process.exitCode()).arg(process.errorString());
        throw std::runtime_error(errorMsg.toStdString());
    } else {
        return true;
    }
}
